# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
   include:
     - master
  paths:
    include:
      - sharkFinApi/*
      - azure-pipelines.yml
    exclude:
      - sharkFin/*
      - azure-pipelines-1.yml


stages:
- stage: build
  jobs:
  - job: build
    
    pool:
      vmImage: 'ubuntu-latest'
    
    variables:
      sdkVersion: 5.x
      buildConfiguration: 'Release'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 2'
      inputs:
        version: 2.0.x
        performMultiLevelLookup: true
    
    - task: SonarCloudPrepare@1
      displayName: 'SonarCloud Prepare'
      inputs:
        SonarCloud: 'SonarCloud'
        organization: '2011-nov02-net'
        scannerMode: 'MSBuild'
        projectKey: '2011-nov02-net_mmp-project2'
        projectName: 'mmp-project2'
        extraProperties: |
          sonar.exclusions=**/lib/**
          sonar.cs.opencover.reportsPaths = $(Agent.TempDirectory)/**/coverage.opencover.xml
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
    - task: UseDotNet@2
      displayName: dotnet sdk $(sdkVersion)
      inputs:
        packageType: 'sdk'
        version: '5.x'
        performMultiLevelLookup: true

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        workingDirectory: 'sharkFinApi'
    
    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: 'test'
        arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'
        testRunTitle: 'Test Run'
        publishTestResults: true
        workingDirectory: 'sharkFinApi'

    - task: SonarCloudAnalyze@1
    
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-o $(build.artifactstagingdirectory)'    


    - publish: $(build.artifactstagingdirectory)
      artifact: app

      
    - download: current   
      artifact: app
      displayName: download app  

    - task: AzureRmWebAppDeployment@4
      condition: and( succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
       ConnectionType: 'AzureRM'
       azureSubscription: 'Azure subscription 1(3)(a7c7be2b-dec9-4b29-b6aa-d73e6d6ad223)'
       appType: 'apiApp'
       WebAppName: 'sharkFinApi'
       packageForLinux: '$(Pipeline.Workspace)/app'
       DeploymentType: 'zipDeploy'
 
  
       
   
#    trigger:
#  branches:
#    include:
#      - master


# variables:
#   solution: '**/*.sln'
#   buildConfiguration: 'Release'
#   apiFolder: './sharkFinApi/sharkFinApi'

# steps:
# - task: UseDotNet@2
#   displayName: 'get 2.0 SDK for sonar'
#   inputs:
#     packageType: 'sdk'
#     version: '2.0.x'

# #sonar settings
# - task: SonarCloudPrepare@1
#   displayName: 'Sonar Prepare'
#   inputs:
#     SonarCloud: 'sonarCloud'
#     organization: '2011-nov02-net'
#     scannerMode: 'MSBuild'
#     projectKey: '2011-nov02-net_mmp-project2'
# - task: SonarCloudPrepare@1
#   inputs:
#     SonarCloud: 'SonarCloud'
#     organization: '2011-nov02-net'
#     scannerMode: 'MSBuild'
#     projectKey: '2011-nov02-net_mmp-project2'
#     projectName: '2011-nov02-net_mmp-project2'
#     extraProperties: |
#       sonar.exclusions=**/lib/**'
#       sonar.cs.xunit.reportsPaths=${Agent.TempDirectory}/**/XUnit.TestResults.xml
#       sonar.cs.opencover.reportsPaths=/home/vsts/work/_temp/coverage/coverage.opencover.xml
  
# - task: UseDotNet@2
#   displayName: 'get sdk for build'
#   inputs:
#     packageType: 'sdk'
#     version: '5.0.x'
  

# - task: DotNetCoreCLI@2
#   displayName: 'dotnet Test Build- $(buildConfiguration)'
#   inputs:
#     command: 'test'
#     projects: '$(System.DefaultWorkingDirectory)/sharkFinApi'
#     arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Agent.TempDirectory)/coverage/ --collect "Code coverage"'
#     testRunTitle: 'Test Run'
    

# - task: SonarCloudAnalyze@1
#   displayName: 'Sonar Cloud - Run'

# - task: SonarCloudPublish@1
#   displayName: 'Sonar Cloud - Timeout'
#   inputs:
#     pollingTimeoutSec: '300'


# - script: dotnet publish  $(apiFolder) --configuration $(buildConfiguration) --output $(System.DefaultWorkingDirectory)/publish
#   displayName: 'dotnet build $(buildConfiguration)'


# #publish artifact
# - publish:  $(System.DefaultWorkingDirectory)/publish
#   displayName: 'publish artifact'
#   artifact: BuildAppArtifact

# - task: AzureRmWebAppDeployment@4
#   displayName: "azure app service deploy backend"
#   condition: and( succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#   inputs:
#     ConnectionType: 'AzureRM'
#     azureSubscription: 'Azure subscription 1(e92a324b-9577-4df8-b544-5189c2ff2bbb)'
#     appType: 'webApp'
#     WebAppName: 'sharkFinApi'
#     packageForLinux: $(System.DefaultWorkingDirectory)/publish
