# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
   include:
     - master
  paths:
    include:
      - azure-pipelines.yml
    exclude:
      - sharkFin/*
      -azure-pipelines-1.yml

      variables:
      sdkVersion: 5.x
      buildConfiguration: 'Release'
      solutionPath: .
      startupProjectPath: sharkFinApi

stages:


- stage: build   
    pool:
      vmImage: 'ubuntu-latest'


  jobs:


  - job: build

    - steps:
    - task: UseDotNet@2
      displayName: 'dotnet sfk $(sdkVersion)'
      inputs:
      packageType: 'sdk'
        version: '$(sdkVersion)'

    - script: dotnet restore
      displayName: dotnet restore
      workingDirectory: sharkFinApi

    - script: dotnet build
        --configuration $(buildConfiguration)
        --no-restore
      displayName: dotnet build
      workingDirectory: $(solutionPath)

    - script: dotnet publish
        --configuration $(buildConfiguration)
        --output $(Build.ArtifactStagingDirectory)/app
      displayName: dotnet publish
      workingDirectory: $(startupProjectPath)

    - publish: $(Build.ArtifactStagingDirectory)/app
      artifact: app
      displayName: artifact publish app

    
  - stage: analyze
    dependsOn: []
    pool:
      vmImage: ubuntu-latest 
    
    jobs:

  - job: analyze

    steps:

    - task: UseDotNet@2
      displayName: dotnet sdk 2.1.x
      inputs:
        packageType: 'sdk'
        version: '2.1.x'

    - task: SonarCloudPrepare@1
      displayName: 'SonarCloud Prepare'
      inputs:
        SonarCloud: 'SonarCloud'
        organization: '2011-nov02-net'
        scannerMode: 'MSBuild'
        projectKey: '2011-nov02-net_mmp-project2'
        projectName: 'mmp-project2'
        extraProperties: |
          sonar.exclusions=**/lib/**
          sonar.cs.opencover.reportsPaths = $(Agent.TempDirectory)/**/coverage.opencover.xml
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

    - task: UseDotNet@2
      displayName: dotnet sdk $(sdkVersion)
      inputs:
        packageType: 'sdk'
        version: '5.x'
        performMultiLevelLookup: true

   - script: dotnet build
        --configuration $(buildConfiguration)
      displayName: dotnet build
      workingDirectory: $(solutionPath)
    
    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: 'test'
        arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'
        testRunTitle: 'Test Run'
        publishTestResults: true
        workingDirectory: 'sharkFinApi'

    - task: SonarCloudAnalyze@1
    
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-o $(build.artifactstagingdirectory)'    

- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn:
  - build
  - analyze
  pool:
    vmImage: ubuntu-latest

  jobs:

  - deployment: deploy_dev

    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            artifact: app
            displayName: artifact download app

          - task: AzureRmWebAppDeployment@4
            displayName: azure app service deploy
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure subscription 1 (a7c7be2b-dec9-4b29-b6aa-d73e6d6ad223)'
              appType: 'webApp'
              WebAppName: 'sharkFinApi'
              packageForLinux: '$(Pipeline.Workspace)/app'
  

   
